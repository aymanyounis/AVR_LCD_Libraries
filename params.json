{"name":"AVR LCD","tagline":"This file contains the LCD module derive which can be included with any AVR device","body":"# AVR_LCD_Libraries\r\n\r\n### \r\n[FILE NAME]: <lcd.h>\r\n[AUTHOR(S)]: <Ayman Younis>\r\n[DATE CREATED]: <6/1/2015>\r\n[DESCRIPTION]: <This file contains the lcd module header file, functions to deal with the lcd, \r\n\t\t\t\tinitialize, send Command, display character, display string, clear screen, go to\r\n\t\t\t\tspecific row and column, display string to specific row and column and convert integer\r\n\t\t\t\tto string\r\n\t\t\t\tOptions:\r\n\t\t\t\t\t-> You can configure it as 4-bit or 8-bit, \r\n\t\t\t\t\t-> Connect the data/control bits any where but connect the Data sequentially and \r\n\t\t\t\t\tthe Control at the same port any pins,\r\n\t\t\t\t\t-> You can connect the CTRL and Data at the same port or different port.\r\n\t\t\t\t\t-> If you configures it as 4-bit mode, and connect the Data and the Control pins\r\n\t\t\t\t\tall on the same port, You can use the remaining pins >\r\n### \r\n\r\n/* LCD_H_MAIN will be defined at the led source file only, so the EXTERN will be removed, also EXTERN\r\n   becomes extern in other files that include dio which is better for linker to allocate memory for \r\n   them than being defined as extern in all files that include lcd header file\r\n*/\r\n#ifdef LCD_H_MAIN\r\n#define EXTERN\r\n#else\r\n#define EXTERN extern\r\n#endif\r\n\r\n#ifndef LCD_H_\r\n#define LCD_H_\r\n\r\n/*--------------------------------------------- INCLUDES -------------------------------------------*/\r\n#include \"dio.h\"\r\n\r\n/*---------------------------------- Definitions and configurations --------------------------------*/\r\n\r\n/* LCD_DATA_MODE represent the DATA PIN NUMBER, 8 pins for 8-bit mode, 4 pins for 4-bit mode */\r\n#define LCD_DATA_MODE\t\t 8 \r\n\r\n/* Control Pins Configuration */\r\n/* port and pin number for RS line */\r\n#define LCD_RS_PORT\t\t\t'C'\r\n#define LCD_RS_PIN\t\t\t 2\r\n/* port and pin number for RW line */\r\n#define LCD_RW_PORT\t\t\t'C'\r\n#define LCD_RW_PIN\t\t\t 1\r\n/* port and pin number for Enable line */\r\n#define LCD_EN_PORT\t\t\t'C'\r\n#define LCD_EN_PIN\t\t\t 0\r\n\r\n/* Data Pins Configuration */\r\n/* configure from LCD_DATA0 to LCD_DATA7 if 8-bit mode \r\n   configure from LCD_DATA4 to LCD_DATA7 if 4-bit mode and Ignore the first 4 pins\r\n*/\r\n/* port and pin number for D0 line */\r\n#define LCD_DATA0_PORT\t\t'B'\r\n#define LCD_DATA0_PIN\t\t 0\r\n/* port and pin number for D1 line */\r\n#define LCD_DATA1_PORT\t\t'B'\r\n#define LCD_DATA1_PIN\t\t 1\r\n/* port and pin number for D2 line */\r\n#define LCD_DATA2_PORT\t\t'B'\r\n#define LCD_DATA2_PIN\t\t 2\r\n/* port and pin number for D3 line */\r\n#define LCD_DATA3_PORT\t\t'B'\r\n#define LCD_DATA3_PIN\t\t 3\r\n\r\n/* Continue Data bits Configuration if 8-bit mode used */\r\n/* port and pin number for D4 line */\r\n#define LCD_DATA4_PORT\t\t'B'\r\n#define LCD_DATA4_PIN\t\t 4\r\n/* port and pin number for D5 line */\r\n#define LCD_DATA5_PORT\t\t'B'\r\n#define LCD_DATA5_PIN\t\t 5\r\n/* port and pin number for D6 line */\r\n#define LCD_DATA6_PORT\t\t'B'\r\n#define LCD_DATA6_PIN\t\t 6\r\n/* port and pin number for D7 line */\r\n#define LCD_DATA7_PORT\t\t'B'\r\n#define LCD_DATA7_PIN\t\t 7\r\n\r\n/* LCD Options and Characteristics */\r\n/* number of lines of the display lcd */\r\n#define LCD_LINES\t\t\t4\r\n/* visible characters per line */\r\n#define LCD_DISP_LENGTH\t\t16\r\n/* DDRAM address of first char of line 1 */\r\n#define LCD_START_LINE1  0x00\r\n/* DDRAM address of first char of line 2 */\r\n#define LCD_START_LINE2  0x40\r\n/* DDRAM address of first char of line 3 */\r\n#define LCD_START_LINE3  0x10\r\n/* DDRAM address of first char of line 4 */\r\n#define LCD_START_LINE4  0x50\r\n\r\n#if (LCD_DATA_MODE==4)\r\n\t#if LCD_LINES==1\r\n\t\t#define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_1LINE\r\n\t#else\r\n\t\t#define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_4BIT_2LINES\r\n\t#endif\r\n#else\r\n\t#if LCD_LINES==1\r\n\t\t#define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_1LINE\r\n\t#else\r\n\t\t#define LCD_FUNCTION_DEFAULT    LCD_FUNCTION_8BIT_2LINES\r\n\t#endif\r\n#endif\r\n\r\n/* Frequently used commands and instructions for LCD */\r\n\r\n/* function set: set interface data length and number of display lines */\r\n#define LCD_FUNCTION_4BIT_1LINE\t\t0x20\t\t/* 4-bit interface, single line, 5x7 dots */\r\n#define LCD_FUNCTION_4BIT_2LINES\t0x28\t\t/* 4-bit interface, dual line,   5x7 dots */\r\n#define LCD_FUNCTION_2_LINES\t\t0x02\r\n#define LCD_FUNCTION_8BIT_1LINE\t\t0x30\t\t/* 8-bit interface, single line, 5x7 dots */\r\n#define LCD_FUNCTION_8BIT_2LINES\t0x38\t\t/* 8-bit interface, dual line,   5x7 dots */\r\n\r\n#define LCD_CLR\t\t\t\t\t\t0x01\t\t/* clear display, (also clear DDRAM content) */\r\n#define LCD_CURSOR_OFF\t\t\t\t0x0C\t\t/* Display on Cursor off */\r\n#define LCD_CURSOR_ON\t\t\t\t0x0E\t\t/* Display on Cursor on */\r\n#define SET_CURSOR_LOCATION\t\t\t0x80\t\t/* Set DDRAM address or cursor position on display */\r\n\r\n/* set entry mode: display shift on/off, dec/inc cursor move direction */\r\n#define LCD_ENTRY_DEC\t\t\t\t0x04\t\t/* display shift off, dec cursor move dir */\r\n#define LCD_ENTRY_DEC_SHIFT\t\t\t0x05\t\t/* display shift on,  dec cursor move dir */\r\n#define LCD_ENTRY_INC\t\t\t\t0x06\t\t/* display shift off, inc cursor move dir */\r\n#define LCD_ENTRY_INC_SHIFT\t\t\t0x07\t\t/* display shift on,  inc cursor move dir */\r\n\r\n/* display on/off, cursor on/off, blinking char at cursor position */\r\n#define LCD_DISP_OFF\t\t\t\t0x08\t\t/* display off                            */\r\n#define LCD_DISP_ON\t\t\t\t\t0x0C\t\t/* display on, cursor off                 */\r\n#define LCD_DISP_ON_BLINK\t\t\t0x0D\t\t/* display on, cursor off, blink char     */\r\n#define LCD_DISP_ON_CURSOR\t\t\t0x0E\t\t/* display on, cursor on                  */\r\n#define LCD_DISP_ON_CURSOR_BLINK\t0x0F\t\t/* display on, cursor on, blink char      */\r\n\r\n/* move cursor/shift display */\r\n#define LCD_MOVE_CURSOR_LEFT\t\t0x10\t\t/* move cursor left  (decrement)          */\r\n#define LCD_MOVE_CURSOR_RIGHT\t\t0x14\t\t/* move cursor right (increment)          */\r\n#define LCD_MOVE_DISP_LEFT\t\t\t0x18\t\t/* shift display left                     */\r\n#define LCD_MOVE_DISP_RIGHT\t\t\t0x1C\t\t/* shift display right                    */\r\n\r\n/*\tRelative jump to 1 which do nothing, it takes 2 cycles \r\n\t\t\tPC ? PC + k + 1\r\n\t\t\t2cycles\r\n*/\r\n#define lcd_e_delay()   __asm__ __volatile__( \"rjmp 1f\\n 1:\" );\r\n\r\n/*----------------------------------- FUNCTION DECLARATIONS ----------------------------------------------------*/\r\n/* ---------------------------------------------------------------------------------------------------------------\r\n[Function Name] : LCD_init\r\n[Description] : This function is responsible for initialize the lcd data pins and control pins\r\n\t\t\t\t\r\n[Args] :\r\n[in] void:\r\n[Returns] : This function return void\r\n--------------------------------------------------------------------------------------------------------------- */\r\nEXTERN void LCD_init(uint8 a_cursorState);\r\n\r\n/* ---------------------------------------------------------------------------------------------------------------\r\n[Function Name] : LCD_sendCommand\r\n[Description] : This function is responsible for sending command to the lcd\r\n\t\t\t\t\r\n[Args] :\r\n[in] uint8 a_command:\r\nThe command to be executed in the LCD\r\n[Returns] : This function return void\r\n--------------------------------------------------------------------------------------------------------------- */\r\nEXTERN void LCD_sendCommand(uint8 a_command);\r\n\r\n/* ---------------------------------------------------------------------------------------------------------------\r\n[Function Name] : LCD_displayCharacter\r\n[Description] : This function is responsible for displaying a character on the lcd\r\n\t\t\t\t\r\n[Args] :\r\n[in] uint8 a_dataCharacter:\r\nThe character to be displayed on the LCD\r\n[Returns] : This function return void\r\n--------------------------------------------------------------------------------------------------------------- */\r\nEXTERN void LCD_displayCharacter(uint8 a_dataCharacter);\r\n\r\nstatic void LCD_write(uint8 a_data, uint8 a_dataType);\r\n\r\nstatic void LCD_ctrlConfig(uint8 a_lcdPort, uint8 a_lcdPin);\r\nstatic void LCD_dataConfig(uint8 a_lcdPort, uint8 a_lcdPin);\r\n\r\nstatic inline void LCD_enHigh(void);\r\nstatic inline void LCD_enLow(void);\r\nstatic inline void LCD_enToggle(void);\r\nstatic inline void LCD_rsHigh(void);\r\nstatic inline void LCD_rsLow(void);\r\nstatic inline void LCD_rwHigh(void);\r\nstatic inline void LCD_rwLow(void);\r\n\r\n/* ---------------------------------------------------------------------------------------------------------------\r\n[Function Name] : LCD_displayString\r\n[Description] : This function is responsible for displaying a string on the lcd\r\n\t\t\t\t\r\n[Args] :\r\n[in] const char *a_dataString_Ptr:\r\nPointer to the string to be displayed on the LCD\r\n[Returns] : This function return void\r\n--------------------------------------------------------------------------------------------------------------- */\r\nEXTERN void LCD_displayString(const uint8* a_dataString_Ptr);\r\n\r\n/* ---------------------------------------------------------------------------------------------------------------\r\n[Function Name] : LCD_clearScreen\r\n[Description] : This function is responsible for clearing the lcd by sending the clearing command CLEAR_COMMAND\r\n\t\t\t\t\r\n[Args] :\r\n[in] void:\r\n[Returns] : This function return void\r\n--------------------------------------------------------------------------------------------------------------- */\r\nEXTERN void LCD_clearScreen(void);\r\n\r\n/* ---------------------------------------------------------------------------------------------------------------\r\n[Function Name] : LCD_displayStringRowColumn\r\n[Description] : This function is responsible for moving the cursor to a specific row and column on the lcd screen\r\n\t\t\t\tand display a string from this position\r\n\t\t\t\t\r\n[Args] :\r\n[in] uint8 a_row,uint8 a_col,const char *a_str_Ptr:\r\nuint8 a_row, the row number\r\nuint8 a_col, the column number\r\nconst char *a_str_Ptr, pointer to the sting to be displayed character by charater using displayCharacter function \r\n[Returns] : This function return void\r\n--------------------------------------------------------------------------------------------------------------- */\r\nEXTERN void LCD_displayStringRowColumn(uint8 a_row, uint8 a_col, const uint8 *a_str_Ptr);\r\n\r\n/* ---------------------------------------------------------------------------------------------------------------\r\n[Function Name] : LCD_goToRowColumn\r\n[Description] : This function is responsible for moving the cursor to a specific row and column on the lcd screen\r\n\t\t\t\t\r\n[Args] :\r\n[in] uint8 a_row,uint8 a_col:\r\nuint8 a_row, the row number\r\nuint8 a_col, the column number\r\n[Returns] : This function return void\r\n--------------------------------------------------------------------------------------------------------------- */\r\nEXTERN void LCD_goToRowColumn(uint8 a_row, uint8 a_col);\r\n\r\n/* ---------------------------------------------------------------------------------------------------------------\r\n[Function Name] : LCD_displayNumber\r\n[Description] : This function is responsible for displaying integer numbers on the lcd by converting this integer \r\n\t\t\t\tto string using the itoa function and then display it as string, the value can be represented as\r\n\t\t\t\tbinary, decimal, octal, hexadecimal, or any other base from 2 to 35.\r\n\t\t\t\t\r\n[Args] :\r\n[in] uint16 a_data, uint8 a_base:\r\na_data: The number value to be displayed on the LCD\r\na_base: The number base to be displayed on the LCD \r\n\tBase can be any integer number from 2 to 35\r\n\t\t2 represent binary,\r\n\t\t8 represent octal,\r\n\t\t10 represent decimal, \r\n\t\t16 represent hexadecimal, ..etc\r\n[Returns] : This function return void\r\n--------------------------------------------------------------------------------------------------------------- */\r\nEXTERN void LCD_displayNumber(sint32 a_data, uint8 a_base);\r\nstatic void itoaAnsiC(sint32 value, uint8* str, uint8 base);\r\nstatic void strreverse(uint8* begin, uint8* end);\r\n\r\n#endif /* LCD_H_ */","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}